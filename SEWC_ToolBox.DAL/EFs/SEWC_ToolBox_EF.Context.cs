//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SEWC_ToolBox.DAL.EFs
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SEWC_ToolBoxEntities : DbContext
    {
        public SEWC_ToolBoxEntities()
            : base("name=SEWC_ToolBoxEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<t_Favorite> t_Favorite { get; set; }
        public virtual DbSet<t_MailTemplate> t_MailTemplate { get; set; }
        public virtual DbSet<t_Customization> t_Customization { get; set; }
        public virtual DbSet<t_UserRole> t_UserRole { get; set; }
        public virtual DbSet<t_Entry> t_Entry { get; set; }
        public virtual DbSet<t_QuickLink> t_QuickLink { get; set; }
        public virtual DbSet<v_UserRole> v_UserRole { get; set; }
        public virtual DbSet<t_LanguageProfile> t_LanguageProfile { get; set; }
        public virtual DbSet<t_Access> t_Access { get; set; }
        public virtual DbSet<v_User> v_User { get; set; }
        public virtual DbSet<t_ProcessConnection> t_ProcessConnection { get; set; }
        public virtual DbSet<t_Attachment> t_Attachment { get; set; }
        public virtual DbSet<t_ProcessLinkage> t_ProcessLinkage { get; set; }
        public virtual DbSet<t_ProcessNode> t_ProcessNode { get; set; }
        public virtual DbSet<v_ProcessNode> v_ProcessNode { get; set; }
        public virtual DbSet<t_Report> t_Report { get; set; }
        public virtual DbSet<t_sys_TypeDescription> t_sys_TypeDescription { get; set; }
        public virtual DbSet<t_Menu> t_Menu { get; set; }
        public virtual DbSet<v_sys_FieldDescription> v_sys_FieldDescription { get; set; }
        public virtual DbSet<V_Report_ClickStatistics> V_Report_ClickStatistics { get; set; }
        public virtual DbSet<t_ReportRole> t_ReportRole { get; set; }
        public virtual DbSet<t_Menu_New> t_Menu_New { get; set; }
        public virtual DbSet<v_MenuList> v_MenuList { get; set; }
        public virtual DbSet<v_SideMenuList> v_SideMenuList { get; set; }
        public virtual DbSet<v_Report> v_Report { get; set; }
        public virtual DbSet<t_OprationLog> t_OprationLog { get; set; }
        public virtual DbSet<t_Report_ClickStatistics> t_Report_ClickStatistics { get; set; }
        public virtual DbSet<BI_LU_SCM_REPORT_ACCESS_REMOVED> BI_LU_SCM_REPORT_ACCESS_REMOVED { get; set; }
        public virtual DbSet<t_ReportIssue> t_ReportIssue { get; set; }
    
        public virtual int SP_Rebuild()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Rebuild");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int SP_RequestSenseAuthor(string gid, string iname, string fname)
        {
            var gidParameter = gid != null ?
                new ObjectParameter("gid", gid) :
                new ObjectParameter("gid", typeof(string));
    
            var inameParameter = iname != null ?
                new ObjectParameter("iname", iname) :
                new ObjectParameter("iname", typeof(string));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RequestSenseAuthor", gidParameter, inameParameter, fnameParameter);
        }
    
        public virtual int Delete_Report(Nullable<int> r_Id)
        {
            var r_IdParameter = r_Id.HasValue ?
                new ObjectParameter("r_Id", r_Id) :
                new ObjectParameter("r_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Report", r_IdParameter);
        }
    
        public virtual int SP_Insert_ClickStatisticsBymanual(Nullable<int> year, Nullable<int> month, Nullable<int> day, string nowdate)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("day", day) :
                new ObjectParameter("day", typeof(int));
    
            var nowdateParameter = nowdate != null ?
                new ObjectParameter("nowdate", nowdate) :
                new ObjectParameter("nowdate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insert_ClickStatisticsBymanual", yearParameter, monthParameter, dayParameter, nowdateParameter);
        }
    
        public virtual int SP_Insert_ReportClickStatistics()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insert_ReportClickStatistics");
        }
    
        public virtual int SP_Update_ClickStatistics(Nullable<int> r_ID, string user_GID)
        {
            var r_IDParameter = r_ID.HasValue ?
                new ObjectParameter("r_ID", r_ID) :
                new ObjectParameter("r_ID", typeof(int));
    
            var user_GIDParameter = user_GID != null ?
                new ObjectParameter("User_GID", user_GID) :
                new ObjectParameter("User_GID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Update_ClickStatistics", r_IDParameter, user_GIDParameter);
        }
    
        public virtual int SP_Update_Favorite(Nullable<int> f_TypeID, Nullable<int> f_ObjectID, Nullable<bool> isAdd, string user_GID)
        {
            var f_TypeIDParameter = f_TypeID.HasValue ?
                new ObjectParameter("f_TypeID", f_TypeID) :
                new ObjectParameter("f_TypeID", typeof(int));
    
            var f_ObjectIDParameter = f_ObjectID.HasValue ?
                new ObjectParameter("f_ObjectID", f_ObjectID) :
                new ObjectParameter("f_ObjectID", typeof(int));
    
            var isAddParameter = isAdd.HasValue ?
                new ObjectParameter("IsAdd", isAdd) :
                new ObjectParameter("IsAdd", typeof(bool));
    
            var user_GIDParameter = user_GID != null ?
                new ObjectParameter("User_GID", user_GID) :
                new ObjectParameter("User_GID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Update_Favorite", f_TypeIDParameter, f_ObjectIDParameter, isAddParameter, user_GIDParameter);
        }
    }
}
